# routers/start.py
from __future__ import annotations

import logging
from typing import Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

log = logging.getLogger(__name__)

# --- callback_data –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CB_LINK_ACCOUNT = "link_account"
CB_MAIN_MENU = "main_menu"

# --- –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
MAIN_MENU_KB = InlineKeyboardMarkup(
    [
        [InlineKeyboardButton("üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data=CB_LINK_ACCOUNT)],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CB_MAIN_MENU)],
    ]
)

# --- —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
async def _send(
    update: Update,
    text: str,
    reply_markup: Optional[InlineKeyboardMarkup] = None,
    *,
    prefer_edit: bool = True,
):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:
    - –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ —á–µ—Ä–µ–∑ callback_query –∏ prefer_edit=True -> edit_text
    - –∏–Ω–∞—á–µ reply_text
    """
    if update.callback_query:
        try:
            await update.callback_query.answer()
        except Exception:
            pass
        if prefer_edit:
            return await update.callback_query.message.edit_text(text, reply_markup=reply_markup)
        return await update.callback_query.message.reply_text(text, reply_markup=reply_markup)

    if update.effective_message:
        return await update.effective_message.reply_text(text, reply_markup=reply_markup)

    if update.effective_chat:
        return await update.get_bot().send_message(update.effective_chat.id, text, reply_markup=reply_markup)


# --- –æ–±—â–∏–π –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n\n"
        "‚Ä¢ –ù–∞–∂–º–∏ ¬´üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.\n"
        "‚Ä¢ –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è ¬´üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª."
    )
    await _send(update, text, reply_markup=MAIN_MENU_KB, prefer_edit=True)


# --- –ø—É–±–ª–∏—á–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã (–æ–∂–∏–¥–∞—é—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ –º–æ–¥—É–ª—è–º–∏)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await show_main_menu(update, context)


async def link_account(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–≥–ª—É—à–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ‚Äî –≤–∞–∂–Ω–∞ —Ç–µ–º, —á—Ç–æ –Ω–∞ –Ω–µ—ë —Å—Å—ã–ª–∞–µ—Ç—Å—è main.py.
    –†–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –º–æ–∂–Ω–æ –≤–Ω–µ–¥—Ä–∏—Ç—å –ø–æ–∑–∂–µ.
    """
    text = (
        "üîß –ü—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.\n"
        "–°–∫–æ—Ä–æ —Ç—É—Ç –ø–æ—è–≤–∏—Ç—Å—è —Ñ–æ—Ä–º–∞/—Å—Å—ã–ª–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ."
    )
    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CB_MAIN_MENU)]]
    )
    await _send(update, text, reply_markup=kb, prefer_edit=True)


async def in_development(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–µ—ë –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç routers.responses)."""
    text = "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üõ†Ô∏è"
    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CB_MAIN_MENU)]]
    )
    await _send(update, text, reply_markup=kb, prefer_edit=True)


async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ª—é–±—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π."""
    await show_main_menu(update, context)
    return ConversationHandler.END


async def start_over(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–§–æ–ª–ª–±—ç–∫: —á–∏—Å—Ç–∏–º —Å—Ç–µ–π—Ç/–¥–∂–æ–±—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    try:
        context.user_data.clear()
        if context.job_queue and update.effective_user:
            for job in context.job_queue.get_jobs_by_name(str(update.effective_user.id)):
                job.schedule_removal()
    except Exception as e:
        log.debug("start_over cleanup issue: %r", e)

    await show_main_menu(update, context)
    return ConversationHandler.END


__all__ = [
    "start",
    "start_over",
    "link_account",
    "in_development",
    "back_to_main_menu",
    "show_main_menu",
]
