<?php

namespace FrontBot\Routers;

use FrontBot\Config\Config;
use FrontBot\Utils\Texts;
use FrontBot\Utils\States;
use FrontBot\Utils\Helpers;
use FrontBot\Utils\Buttons;
use Longman\TelegramBot\Entities\InlineKeyboard;
use Longman\TelegramBot\Entities\InlineKeyboardButton;
use Longman\TelegramBot\Entities\Update;
use Longman\TelegramBot\Request;

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–æ–≤ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
 */
class AutoResponsesRouter
{
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–æ–≤
     */
    public static function showAutoResponsesMenu(Update $update, array &$userData): array
    {
        $callbackQuery = $update->getCallbackQuery();
        $chatId = $callbackQuery->getMessage()->getChat()->getId();
        $messageId = $callbackQuery->getMessage()->getMessageId();

        Request::answerCallbackQuery([
            'callback_query_id' => $callbackQuery->getId()
        ]);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–æ–≤
        $autoResponsesActive = $userData['auto_responses_active'] ?? false;
        
        if ($autoResponsesActive) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            $startDate = $userData['auto_responses_start_date'] ?? date('d.m.Y');
            $startTime = $userData['auto_responses_start_time'] ?? date('H:i');
            $todayCount = $userData['auto_responses_today_count'] ?? 0;
            $totalCount = $userData['auto_responses_total_count'] ?? 0;
            $filtersInfo = $userData['auto_responses_filters_info'] ?? '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã';

            $text = Texts::getAutoResponseActiveStatus(
                $startDate,
                $startTime,
                $todayCount,
                $totalCount,
                $filtersInfo
            );

            $keyboard = new InlineKeyboard(
                [new InlineKeyboardButton(['text' => '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∏', 'callback_data' => 'auto_stop'])],
                [new InlineKeyboardButton(['text' => '‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'callback_data' => 'auto_change_settings'])],
                [new InlineKeyboardButton(['text' => Texts::BACK_TO_MAIN_MENU, 'callback_data' => 'main_menu'])]
            );
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            $text = Texts::AUTO_RESPONSE_INACTIVE_STATUS;

            $keyboard = new InlineKeyboard(
                [new InlineKeyboardButton(['text' => 'üöÄ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∏', 'callback_data' => 'auto_setup'])],
                [new InlineKeyboardButton(['text' => Texts::BACK_TO_MAIN_MENU, 'callback_data' => 'main_menu'])]
            );
        }

        Request::editMessageText([
            'chat_id' => $chatId,
            'message_id' => $messageId,
            'text' => $text,
            'reply_markup' => $keyboard
        ]);

        return ['state' => null];
    }

    /**
     * –ù–∞—á–∏–Ω–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–æ–≤
     */
    public static function startAutoSetup(Update $update, array &$userData): array
    {
        $callbackQuery = $update->getCallbackQuery();
        $chatId = $callbackQuery->getMessage()->getChat()->getId();
        $messageId = $callbackQuery->getMessage()->getMessageId();

        Request::answerCallbackQuery([
            'callback_query_id' => $callbackQuery->getId()
        ]);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∞—Ö
        $text = Texts::AUTO_RESPONSE_MAIN;

        $keyboard = new InlineKeyboard([
            new InlineKeyboardButton(['text' => '‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É', 'callback_data' => 'auto_ask_resume'])
        ]);

        Request::editMessageText([
            'chat_id' => $chatId,
            'message_id' => $messageId,
            'text' => $text,
            'reply_markup' => $keyboard
        ]);

        return ['state' => null];
    }

    /**
     * –í—ã–±–æ—Ä —Ä–µ–∑—é–º–µ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–æ–≤
     */
    public static function askAutoResume(Update $update, array &$userData): array
    {
        $callbackQuery = $update->getCallbackQuery();
        $chatId = $callbackQuery->getMessage()->getChat()->getId();
        $messageId = $callbackQuery->getMessage()->getMessageId();

        Request::answerCallbackQuery([
            'callback_query_id' => $callbackQuery->getId()
        ]);

        $userData['auto_request'] = [];

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ä–µ–∑—é–º–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        $resumes = Config::DEMO_RESUMES;

        $keyboard = [];
        foreach ($resumes as $resume) {
            $keyboard[] = [new InlineKeyboardButton([
                'text' => $resume['title'],
                'callback_data' => 'auto_resume_' . $resume['id']
            ])];
        }

        $replyMarkup = new InlineKeyboard(...$keyboard);

        Request::editMessageText([
            'chat_id' => $chatId,
            'message_id' => $messageId,
            'text' => Texts::AUTO_RESPONSE_ASK_RESUME,
            'reply_markup' => $replyMarkup
        ]);

        $userData['current_state'] = States::AUTO_ASK_RESUME;
        return ['state' => States::AUTO_ASK_RESUME];
    }

    /**
     * –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–æ–≤
     */
    public static function askAutoSearchMethod(Update $update, array &$userData): array
    {
        $callbackQuery = $update->getCallbackQuery();
        $chatId = $callbackQuery->getMessage()->getChat()->getId();
        $messageId = $callbackQuery->getMessage()->getMessageId();

        $userData['auto_request']['resume'] = str_replace('auto_resume_', '', $callbackQuery->getData());

        Request::answerCallbackQuery([
            'callback_query_id' => $callbackQuery->getId()
        ]);

        $keyboard = new InlineKeyboard(
            [new InlineKeyboardButton(['text' => '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã', 'callback_data' => 'auto_configure_filters'])],
            [new InlineKeyboardButton(['text' => '–í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É hh.ru', 'callback_data' => 'auto_paste_link'])]
        );

        Request::editMessageText([
            'chat_id' => $chatId,
            'message_id' => $messageId,
            'text' => Texts::AUTO_RESPONSE_ASK_SEARCH_METHOD,
            'reply_markup' => $keyboard
        ]);

        $userData['current_state'] = States::AUTO_ASK_SEARCH_METHOD;
        return ['state' => States::AUTO_ASK_SEARCH_METHOD];
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ñ–ª–æ—É —á—Ç–æ –∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤)
     */
    public static function configureAutoFilters(Update $update, array &$userData): array
    {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ ResponsesRouter
        return ResponsesRouter::askCountryForFilters($update, $userData);
    }

    /**
     * –ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ HH.ru –¥–ª—è –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–æ–≤
     */
    public static function askAutoHhUrl(Update $update, array &$userData): array
    {
        $callbackQuery = $update->getCallbackQuery();
        $chatId = $callbackQuery->getMessage()->getChat()->getId();
        $messageId = $callbackQuery->getMessage()->getMessageId();

        Request::answerCallbackQuery([
            'callback_query_id' => $callbackQuery->getId()
        ]);

        Request::editMessageText([
            'chat_id' => $chatId,
            'message_id' => $messageId,
            'text' => Texts::AUTO_RESPONSE_ASK_HH_URL
        ]);

        $userData['current_state'] = States::AUTO_ASK_HH_URL;
        return ['state' => States::AUTO_ASK_HH_URL];
    }

    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–æ–≤
     */
    public static function autoConfirmation(Update $update, array &$userData): array
    {
        $callbackQuery = $update->getCallbackQuery();
        $chatId = $callbackQuery->getMessage()->getChat()->getId();
        $messageId = $callbackQuery->getMessage()->getMessageId();

        Request::answerCallbackQuery([
            'callback_query_id' => $callbackQuery->getId()
        ]);

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        $resumeTitle = '–í—ã–±—Ä–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ';
        $searchMethod = '–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã';
        $filtersSummary = '–î–µ–º–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤';
        $coverLetterStatus = '–ë–µ–∑ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞';

        $text = Texts::getAutoResponseConfirmation(
            $resumeTitle,
            $searchMethod,
            $filtersSummary,
            $coverLetterStatus
        );

        $keyboard = new InlineKeyboard(
            [new InlineKeyboardButton(['text' => 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∏', 'callback_data' => 'auto_start'])],
            [new InlineKeyboardButton(['text' => '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'callback_data' => 'auto_ask_resume'])]
        );

        Request::editMessageText([
            'chat_id' => $chatId,
            'message_id' => $messageId,
            'text' => $text,
            'reply_markup' => $keyboard
        ]);

        $userData['current_state'] = States::AUTO_CONFIRMATION;
        return ['state' => States::AUTO_CONFIRMATION];
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–æ–≤
     */
    public static function startAutoResponses(Update $update, array &$userData): array
    {
        $callbackQuery = $update->getCallbackQuery();
        $chatId = $callbackQuery->getMessage()->getChat()->getId();
        $messageId = $callbackQuery->getMessage()->getMessageId();

        Request::answerCallbackQuery([
            'callback_query_id' => $callbackQuery->getId()
        ]);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–æ–≤
        $userData['auto_responses_active'] = true;
        $userData['auto_responses_start_date'] = date('d.m.Y');
        $userData['auto_responses_start_time'] = date('H:i');
        $userData['auto_responses_today_count'] = 0;
        $userData['auto_responses_total_count'] = 0;
        $userData['auto_responses_filters_info'] = '–î–µ–º–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤';

        $keyboard = new InlineKeyboard([
            new InlineKeyboardButton(['text' => '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'main_menu'])
        ]);

        Request::editMessageText([
            'chat_id' => $chatId,
            'message_id' => $messageId,
            'text' => Texts::AUTO_RESPONSE_STARTED,
            'reply_markup' => $keyboard
        ]);

        return ['state' => null];
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–æ–≤
     */
    public static function stopAutoResponses(Update $update, array &$userData): array
    {
        $callbackQuery = $update->getCallbackQuery();
        $chatId = $callbackQuery->getMessage()->getChat()->getId();
        $messageId = $callbackQuery->getMessage()->getMessageId();

        Request::answerCallbackQuery([
            'callback_query_id' => $callbackQuery->getId()
        ]);

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∏
        $userData['auto_responses_active'] = false;

        $keyboard = new InlineKeyboard(
            [new InlineKeyboardButton(['text' => 'üöÄ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∏', 'callback_data' => 'auto_setup'])],
            [new InlineKeyboardButton(['text' => Texts::BACK_TO_MAIN_MENU, 'callback_data' => 'main_menu'])]
        );

        Request::editMessageText([
            'chat_id' => $chatId,
            'message_id' => $messageId,
            'text' => Texts::AUTO_RESPONSE_STOPPED,
            'reply_markup' => $keyboard
        ]);

        return ['state' => null];
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ HH.ru
     */
    public static function handleAutoHhUrlInput(Update $update, array &$userData): array
    {
        $message = $update->getMessage();
        $chatId = $message->getChat()->getId();
        $url = $message->getText();

        $userData['auto_request']['hh_url'] = $url;

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        $keyboard = new InlineKeyboard([
            new InlineKeyboardButton(['text' => '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'callback_data' => 'auto_continue_to_confirmation'])
        ]);

        Request::sendMessage([
            'chat_id' => $chatId,
            'text' => "–°—Å—ã–ª–∫–∞ HH.ru: {$url}\n–ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
            'reply_markup' => $keyboard
        ]);

        $userData['current_state'] = States::AUTO_CONFIRMATION;
        return ['state' => States::AUTO_CONFIRMATION];
    }
}