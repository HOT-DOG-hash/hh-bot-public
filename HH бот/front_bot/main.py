import os
import sys
import asyncio
import logging
from logging.handlers import WatchedFileHandler
from pathlib import Path

# –°–Ω–∏–º–æ–∫ –æ–∫—Ä—É–∂–µ–Ω–∏—è –î–û –ª—é–±—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ ¬´—à—É–º–Ω—ã—Ö¬ª –º–æ–¥—É–ª–µ–π
ORIG_ENV = dict(os.environ)

from telegram import BotCommand, Update
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    PicklePersistence,
)

# ‚îÄ‚îÄ‚îÄ logging ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def setup_logging() -> None:
    """
    ¬´–ñ–∏–≤—É—á–µ–µ¬ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:
    - –ø—ã—Ç–∞–µ–º—Å—è –ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é /var/log/app/bot.log);
    - –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤/–ø—É—Ç–∏ ‚Äî –Ω–µ –ø–∞–¥–∞–µ–º, –æ—Å—Ç–∞—ë–º—Å—è —Å–æ stdout.
    """
    log_file = os.getenv("BOT_LOG_FILE", "/var/log/app/bot.log")
    fmt = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"

    handlers: list[logging.Handler] = [logging.StreamHandler()]
    try:
        Path(log_file).parent.mkdir(parents=True, exist_ok=True)
        fh = WatchedFileHandler(log_file, encoding="utf-8")
        handlers.append(fh)
    except Exception as e:  # noqa: BLE001
        # –¢–æ–ª—å–∫–æ stdout/stderr ‚Äî –Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∂–∏–≤—ë—Ç
        print(f"[setup_logging] WARN: file logging disabled ({e})", file=sys.stderr)

    logging.basicConfig(level=logging.INFO, format=fmt, handlers=handlers)

# ‚îÄ‚îÄ‚îÄ token ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _sanitize(s: str | None) -> str | None:
    if not s:
        return None
    s = s.strip().strip('"').strip("'").strip()
    if s.startswith("<") and s.endswith(">"):
        s = s[1:-1].strip()
    return s or None

def read_token() -> str:
    """
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –∏—Å—Ö–æ–¥–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ ‚Üí —Ç–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ.
    –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º .env, –Ω–µ –≤–∞–ª–∏–º—Å—è –∏–∑-–∑–∞ –∫–∞–≤—ã—á–µ–∫/—Å–∫–æ–±–æ–∫.
    """
    sources = [
        ("ORIG_ENV.TELEGRAM_BOT_TOKEN", ORIG_ENV.get("TELEGRAM_BOT_TOKEN")),
        ("ORIG_ENV.BOT_TOKEN", ORIG_ENV.get("BOT_TOKEN")),
        ("ENV.TELEGRAM_BOT_TOKEN", os.getenv("TELEGRAM_BOT_TOKEN")),
        ("ENV.BOT_TOKEN", os.getenv("BOT_TOKEN")),
    ]
    invalid = {"TELEGRAM_BOT_TOKEN", "BOT_TOKEN", "changeme", "YOUR_TOKEN_HERE"}

    token = None
    picked = None
    for name, val in sources:
        val = _sanitize(val)
        if val and (":" in val) and (len(val) >= 30) and (val not in invalid):
            token, picked = val, name
            break

    if not token:
        logging.error("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π. –ó–∞–¥–∞–π TELEGRAM_BOT_TOKEN (–∏–ª–∏ BOT_TOKEN) –≤ .env")
        sys.exit(1)

    masked = f"{token[:4]}...{token[-4:]}" if len(token) > 8 else "***"
    logging.info("Telegram token –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ %s (%s)", picked, masked)
    return token

# ‚îÄ‚îÄ‚îÄ main ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    setup_logging()
    token = read_token()

    # –î—É–±–ª–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ç–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ ‚Äî —á—Ç–æ–±—ã –ª—é–±—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ
    # –º–æ–¥—É–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, config.py) —É–≤–∏–¥–µ–ª–∏ –µ–≥–æ –¥–∞–∂–µ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –º—É—Ç–∏—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ.
    os.environ["TELEGRAM_BOT_TOKEN"] = token
    os.environ["BOT_TOKEN"] = token

    # –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã (–º–æ–≥—É—Ç –∏–º–µ—Ç—å —Å–∞–π–¥-—ç—Ñ—Ñ–µ–∫—Ç—ã)
    from routers import menu, start, letters, responses, auto_responses, stats

    persistence = PicklePersistence(filepath="demo_bot_persistence")
    app = Application.builder().token(token).persistence(persistence).build()

    commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å / –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"),
        BotCommand("menu", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üß≠"),
        BotCommand("responses", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–∫–ª–∏–∫–∏ üöÄ"),
        BotCommand("response_message", "–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞ ‚úâÔ∏è"),
    ]

    responses_conv: ConversationHandler = responses.get_responses_conv_handler()
    cover_letter_conv: ConversationHandler = letters.get_cover_letter_conv_handler()
    auto_responses_conv: ConversationHandler = auto_responses.get_auto_responses_conv_handler()
    stats_conv: ConversationHandler = stats.get_stats_conv_handler()

    app.add_handler(CommandHandler("start", start.start))
    app.add_handler(CommandHandler("menu", menu.main_menu))
    app.add_handler(responses_conv)
    app.add_handler(cover_letter_conv)
    app.add_handler(auto_responses_conv)
    app.add_handler(stats_conv)

    app.add_handler(CallbackQueryHandler(start.link_account, pattern=r"^link_account$"))
    app.add_handler(CallbackQueryHandler(menu.show_subscription, pattern=r"^subscription$"))
    app.add_handler(CallbackQueryHandler(menu.handle_payment_stub, pattern=r"^pay_(week|month)$"))
    app.add_handler(CallbackQueryHandler(menu.show_support, pattern=r"^support$"))
    app.add_handler(CallbackQueryHandler(menu.show_referral_program, pattern=r"^referral$"))
    app.add_handler(CallbackQueryHandler(menu.main_menu, pattern=r"^main_menu$"))

    async with app:
        await app.initialize()
        await app.bot.set_my_commands(commands)
        me = await app.bot.get_me()
        logging.info("–ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ë–æ—Ç: @%s (id=%s)", me.username, me.id)

        logging.info("–ó–∞–ø—É—Å–∫–∞–µ–º polling ...")
        await app.start()
        await app.updater.start_polling(allowed_updates=Update.ALL_TYPES)

        await asyncio.Event().wait()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("Bot stopped by user")
