from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters, CommandHandler, CallbackQueryHandler
import logging
from datetime import datetime, date
from urllib.parse import urlencode, urlparse, parse_qs

import config
from utils import texts, states, buttons
from utils.states import (
    AUTO_RESPONSE_MAIN, AUTO_RESPONSE_SETUP, AUTO_RESPONSE_RESUME, AUTO_RESPONSE_SEARCH_METHOD,
    AUTO_RESPONSE_FILTERS, AUTO_RESPONSE_HH_URL, AUTO_RESPONSE_COVER_LETTER, AUTO_RESPONSE_CONFIRMATION,
    AUTO_RESPONSE_ACTIVE, AUTO_RESPONSE_STATS,
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –æ–±—ã—á–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏
    ASK_COUNTRY, ASK_REGION, ASK_SCHEDULE, ASK_EMPLOYMENT, ASK_PROFESSION, ASK_KEYWORD, ASK_SEARCH_FIELD
)
from utils.helpers import build_multi_choice_keyboard, handle_multi_choice, build_paginated_keyboard
from routers.start import in_development

async def show_auto_responses_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω—ã –ª–∏ –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∏
    auto_response_active = context.user_data.get('auto_response_active', False)
    
    if auto_response_active:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–æ–≤
        auto_response_data = context.user_data.get('auto_response_settings', {})
        start_date = auto_response_data.get('start_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        start_time = auto_response_data.get('start_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        today_count = auto_response_data.get('today_count', 0)
        total_count = auto_response_data.get('total_count', 0)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
        if auto_response_data.get('search_by_url'):
            filters_info = f"–ü–æ–∏—Å–∫ –ø–æ —Å—Å—ã–ª–∫–µ: {auto_response_data.get('hh_url', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
        else:
            filters_info = f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –±–æ—Ç–µ"
        
        text = texts.get_auto_response_active_status(
            start_date, start_time, today_count, total_count, filters_info
        )
        
        keyboard = [
            [InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∏", callback_data="auto_stop")],
            [InlineKeyboardButton("‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="auto_change_settings")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
        text = texts.AUTO_RESPONSE_MAIN
        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∏", callback_data="auto_setup")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.edit_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)
    
    return AUTO_RESPONSE_MAIN

async def start_auto_response_setup(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–æ–≤
    context.user_data['auto_response_setup'] = {}
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∑—é–º–µ
    return await ask_auto_response_resume(update, context)

async def ask_auto_response_resume(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–®–∞–≥ 1: –í—ã–±–æ—Ä —Ä–µ–∑—é–º–µ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–æ–≤"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ä–µ–∑—é–º–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    resumes = config.DEMO_RESUMES
    
    keyboard = [[InlineKeyboardButton(resume['title'], callback_data=f"auto_resume_{resume['id']}")] for resume in resumes]
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="auto_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = texts.AUTO_RESPONSE_ASK_RESUME
    
    if update.callback_query:
        await update.callback_query.message.edit_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)
    
    return AUTO_RESPONSE_RESUME

async def ask_auto_response_search_method(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–®–∞–≥ 2: –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–∏—Å–∫–∞"""
    query = update.callback_query
    resume_id = query.data.replace("auto_resume_", "")
    context.user_data['auto_response_setup']['resume_id'] = resume_id
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üîé –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –≤ –±–æ—Ç–µ", callback_data="auto_configure_filters")],
        [InlineKeyboardButton("üåê –í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–∏—Å–∫–∞ hh.ru", callback_data="auto_paste_link")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="auto_resume_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = texts.AUTO_RESPONSE_ASK_SEARCH_METHOD
    await query.message.edit_text(text, reply_markup=reply_markup)
    
    return AUTO_RESPONSE_SEARCH_METHOD

async def ask_auto_response_hh_url(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É —Å hh.ru"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="auto_search_method_back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(texts.AUTO_RESPONSE_ASK_HH_URL, reply_markup=reply_markup)
    
    return AUTO_RESPONSE_HH_URL

async def handle_auto_response_hh_url(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É —Å hh.ru –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"""
    url_text = update.message.text
    
    try:
        parsed_url = urlparse(url_text)
        query_params = parse_qs(parsed_url.query)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ URL
        setup_data = context.user_data['auto_response_setup']
        setup_data['search_by_url'] = True
        setup_data['hh_url'] = url_text
        setup_data['keyword'] = query_params.get('text', [''])[0]
        setup_data['area'] = query_params.get('area', [])
        setup_data['schedule'] = query_params.get('schedule', [])
        setup_data['employment'] = query_params.get('employment', [])
        setup_data['profession'] = query_params.get('professional_role', [])
        setup_data['search_fields'] = query_params.get('search_field', [])
        
        logging.info(f"Parsed auto-response URL. Setup data: {setup_data}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞
        return await ask_auto_response_cover_letter(update, context)
        
    except Exception as e:
        logging.error(f"Failed to parse auto-response HH URL: {url_text}. Error: {e}", exc_info=True)
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return AUTO_RESPONSE_HH_URL

async def start_auto_response_filters(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –∏–∑ –æ–±—ã—á–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤)"""
    query = update.callback_query
    await query.answer()
    
    context.user_data['auto_response_setup']['search_by_url'] = False
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ responses.py –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã
    countries = config.DEMO_COUNTRIES
    context.bot_data['countries'] = countries
    
    reply_markup = build_paginated_keyboard(countries, page=0, prefix='auto_country')
    await query.message.edit_text("üìç –®–∞–≥ 3/10:\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø–æ–∏—Å–∫–∞", reply_markup=reply_markup)
    
    return AUTO_RESPONSE_FILTERS

async def ask_auto_response_cover_letter(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–®–∞–≥ 9: –í—ã–±–æ—Ä —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"""
    cover_letters = context.user_data.get('cover_letters', [])
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞
    if cover_letters:
        for i, letter in enumerate(cover_letters):
            keyboard.append([InlineKeyboardButton(f"üìÑ {letter['title']}", callback_data=f"auto_cl_select_{i}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏
    keyboard.extend([
        [InlineKeyboardButton("‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ", callback_data="auto_cl_write_new")],
        [InlineKeyboardButton("üì≠ –ë–µ–∑ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞", callback_data="auto_no_letter")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="auto_cover_letter_back")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = "üìç –®–∞–≥ 9/10:\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–æ–≤:"
    
    if update.callback_query:
        await update.callback_query.message.edit_text(text, reply_markup=reply_markup)
    elif update.message:
        await update.message.reply_text(text, reply_markup=reply_markup)
    
    return AUTO_RESPONSE_COVER_LETTER

async def handle_auto_response_cover_letter_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "auto_no_letter":
        context.user_data['auto_response_setup']['cover_letter'] = "–ë–µ–∑ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"
    elif query.data.startswith("auto_cl_select_"):
        letter_index = int(query.data.split('_')[-1])
        letter = context.user_data['cover_letters'][letter_index]
        context.user_data['auto_response_setup']['cover_letter'] = letter['body']
    elif query.data == "auto_cl_write_new":
        await query.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–æ–≤:")
        context.user_data['waiting_for_auto_cover_letter'] = True
        return AUTO_RESPONSE_COVER_LETTER
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    return await show_auto_response_confirmation(update, context)

async def handle_auto_response_cover_letter_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"""
    if context.user_data.get('waiting_for_auto_cover_letter', False):
        context.user_data['auto_response_setup']['cover_letter'] = update.message.text
        context.user_data.pop('waiting_for_auto_cover_letter', None)
        return await show_auto_response_confirmation(update, context, message=update.message)
    else:
        return AUTO_RESPONSE_COVER_LETTER

async def show_auto_response_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE, message=None) -> int:
    """–®–∞–≥ 10: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–æ–≤"""
    setup_data = context.user_data['auto_response_setup']
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ
    resume_id = setup_data.get('resume_id')
    resume_title = next((r['title'] for r in config.DEMO_RESUMES if r['id'] == resume_id), '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞
    if setup_data.get('search_by_url'):
        search_method = "–ü–æ —Å—Å—ã–ª–∫–µ hh.ru"
        filters_summary = f"–°—Å—ã–ª–∫–∞: {setup_data.get('hh_url', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
    else:
        search_method = "–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã"
        filters_summary = "–§–∏–ª—å—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –±–æ—Ç–µ"
    
    # –°—Ç–∞—Ç—É—Å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞
    cover_letter = setup_data.get('cover_letter', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    cover_letter_status = "–î–∞" if cover_letter != "–ë–µ–∑ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞" else "–ù–µ—Ç"
    
    text = texts.get_auto_response_confirmation(
        resume_title, search_method, filters_summary, cover_letter_status
    )
    
    keyboard = [
        [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∏", callback_data="auto_start")],
        [InlineKeyboardButton("üîô –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="auto_change_settings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if message:
        await message.reply_text(text, reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.edit_text(text, reply_markup=reply_markup)
    
    return AUTO_RESPONSE_CONFIRMATION

async def start_auto_responses(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–æ–≤
    setup_data = context.user_data.pop('auto_response_setup', {})
    context.user_data['auto_response_settings'] = setup_data
    context.user_data['auto_response_active'] = True
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø—É—Å–∫–µ
    now = datetime.now()
    context.user_data['auto_response_settings']['start_date'] = now.strftime('%d.%m.%Y')
    context.user_data['auto_response_settings']['start_time'] = now.strftime('%H:%M')
    context.user_data['auto_response_settings']['today_count'] = 0
    context.user_data['auto_response_settings']['total_count'] = 0
    
    keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(texts.AUTO_RESPONSE_STARTED, reply_markup=reply_markup)
    
    return ConversationHandler.END

async def stop_auto_responses(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    context.user_data['auto_response_active'] = False
    
    keyboard = [
        [InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="auto_restart")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(texts.AUTO_RESPONSE_STOPPED, reply_markup=reply_markup)
    
    return AUTO_RESPONSE_MAIN

async def restart_auto_responses(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    query = update.callback_query
    await query.answer()
    
    context.user_data['auto_response_active'] = True
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
    now = datetime.now()
    context.user_data['auto_response_settings']['start_date'] = now.strftime('%d.%m.%Y')
    context.user_data['auto_response_settings']['start_time'] = now.strftime('%H:%M')
    
    keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(texts.AUTO_RESPONSE_STARTED, reply_markup=reply_markup)
    
    return ConversationHandler.END

def get_auto_responses_conv_handler():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç conversation handler –¥–ª—è –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–æ–≤"""
    from routers import menu, start
    
    return ConversationHandler(
        entry_points=[
            CallbackQueryHandler(show_auto_responses_main, pattern="^auto_responses$"),
        ],
        states={
            AUTO_RESPONSE_MAIN: [
                CallbackQueryHandler(start_auto_response_setup, pattern="^auto_setup$"),
                CallbackQueryHandler(stop_auto_responses, pattern="^auto_stop$"),
                CallbackQueryHandler(start_auto_response_setup, pattern="^auto_change_settings$"),
                CallbackQueryHandler(restart_auto_responses, pattern="^auto_restart$"),
            ],
            AUTO_RESPONSE_RESUME: [
                CallbackQueryHandler(ask_auto_response_search_method, pattern="^auto_resume_"),
                CallbackQueryHandler(show_auto_responses_main, pattern="^auto_main$"),
            ],
            AUTO_RESPONSE_SEARCH_METHOD: [
                CallbackQueryHandler(start_auto_response_filters, pattern="^auto_configure_filters$"),
                CallbackQueryHandler(ask_auto_response_hh_url, pattern="^auto_paste_link$"),
                CallbackQueryHandler(ask_auto_response_resume, pattern="^auto_resume_back$"),
            ],
            AUTO_RESPONSE_HH_URL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_auto_response_hh_url),
                CallbackQueryHandler(ask_auto_response_search_method, pattern="^auto_search_method_back$"),
            ],
            AUTO_RESPONSE_FILTERS: [
                # –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
                CallbackQueryHandler(ask_auto_response_cover_letter, pattern="^auto_filters_done$"),
            ],
            AUTO_RESPONSE_COVER_LETTER: [
                CallbackQueryHandler(handle_auto_response_cover_letter_selection, pattern="^auto_no_letter$"),
                CallbackQueryHandler(handle_auto_response_cover_letter_selection, pattern=r"^auto_cl_select_\d+$"),
                CallbackQueryHandler(handle_auto_response_cover_letter_selection, pattern="^auto_cl_write_new$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_auto_response_cover_letter_text),
            ],
            AUTO_RESPONSE_CONFIRMATION: [
                CallbackQueryHandler(start_auto_responses, pattern="^auto_start$"),
                CallbackQueryHandler(start_auto_response_setup, pattern="^auto_change_settings$"),
            ],
        },
        fallbacks=[
            CommandHandler("start", start.start_over),
            CallbackQueryHandler(menu.back_to_main_menu, pattern="^main_menu$"),
        ],
        allow_reentry=True
    )