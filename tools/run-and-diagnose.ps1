param(
  [switch]$Rebuild,      # –≤—ã–ø–æ–ª–Ω–∏—Ç—å docker compose build web bot
  [switch]$NoCache,      # –≤–º–µ—Å—Ç–µ —Å -Rebuild –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å --no-cache
  [int]$TimeoutSec = 120,
  [int]$Tail = 200,
  [switch]$SaveLogs      # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏ –≤ .diagnostics\<timestamp>
)

# ---------- –ü–£–¢–ò ----------
$RepoRoot   = "C:\git-public\hh-bot-public"
$ComposeYml = Join-Path $RepoRoot "docker-compose.yml"
$EnvPath    = Join-Path $RepoRoot ".env"
$Entrypoint = Join-Path $RepoRoot "HH –±–æ—Ç\bot\entrypoint.sh"
$RunnerPy   = Join-Path $RepoRoot "HH –±–æ—Ç\bot\runner.py"

# ---------- –•–ï–õ–ü–ï–†–´ ----------
function Fail($msg){ Write-Error $msg; exit 1 }
function Check-Cmd($name){ & $name --version *>$null; if($LASTEXITCODE -ne 0){ Fail "–ù–µ –Ω–∞–π–¥–µ–Ω–æ: $name" } }

function Read-DotEnv($Path){
  $map=@{}
  if(Test-Path $Path){
    (Get-Content -Raw -Encoding UTF8 $Path) -split "`n" | ForEach-Object {
      $line = $_.Trim()
      if($line -and -not $line.StartsWith("#") -and $line -match '^[A-Za-z_][A-Za-z0-9_]*='){
        $k,$v = $line -split '=',2
        $map[$k] = $v
      }
    }
  }
  $map
}

function Get-ContainerId($service){
  $id = (docker compose -f "$ComposeYml" ps -q $service).Trim()
  return $id
}

function Get-Health($cid){
  if(-not $cid){ return "missing" }
  $fmt='{{if .State.Health}}{{.State.Health.Status}}{{else}}{{.State.Status}}{{end}}'
  $out = docker inspect --format $fmt $cid 2>$null
  if($LASTEXITCODE -ne 0){ return "unknown" }
  return $out.Trim()
}

function Wait-Healthy($services, $timeoutSec){
  $deadline = (Get-Date).AddSeconds($timeoutSec)
  $status = @{}
  do{
    foreach($s in $services){
      $cid = Get-ContainerId $s
      $status[$s] = Get-Health $cid
    }
    $allOk = ($status.Values | ForEach-Object { $_ -eq "healthy" } | Where-Object {$_ -eq $true}).Count -eq $services.Count
    if($allOk){ return $true }
    Start-Sleep -Seconds 3
  } while((Get-Date) -lt $deadline)
  Write-Warning "–ù–µ –¥–æ–∂–¥–∞–ª–∏—Å—å –∑–¥–æ—Ä–æ–≤—å—è: $($status.GetEnumerator() | ForEach-Object { ""$($_.Key)=$($_.Value)"" } -join ', ')"
  return $false
}

function Save-Logs($dir, $tail){
  New-Item -ItemType Directory -Force -Path $dir | Out-Null
  docker compose -f "$ComposeYml" ps           | Out-File -FilePath (Join-Path $dir "ps.txt") -Encoding utf8
  docker compose -f "$ComposeYml" config       | Out-File -FilePath (Join-Path $dir "config.yml") -Encoding utf8
  docker compose -f "$ComposeYml" logs --no-color --tail $tail `
    | Out-File -FilePath (Join-Path $dir "compose.log") -Encoding utf8
  foreach($s in @("db","cache","web","bot","nginx")){
    docker compose -f "$ComposeYml" logs --no-color --tail $tail $s `
      | Out-File -FilePath (Join-Path $dir "$s.log") -Encoding utf8
  }
  Write-Host "–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: $dir"
}

# ---------- –ü–†–û–í–ï–†–ö–ò –û–ö–†–£–ñ–ï–ù–ò–Ø ----------
Check-Cmd docker
docker compose version *>$null
if($LASTEXITCODE -ne 0){ Fail "–ù–µ –Ω–∞–π–¥–µ–Ω docker compose v2" }

if(-not (Test-Path $ComposeYml)){ Fail "–ù–µ—Ç —Ñ–∞–π–ª–∞: $ComposeYml" }
if(-not (Test-Path $EnvPath)){   Fail "–ù–µ—Ç —Ñ–∞–π–ª–∞: $EnvPath" }
if(-not (Test-Path $Entrypoint)){Fail "–ù–µ—Ç —Ñ–∞–π–ª–∞: $Entrypoint" }
if(-not (Test-Path $RunnerPy)){  Fail "–ù–µ—Ç —Ñ–∞–π–ª–∞: $RunnerPy" }

# .env –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ù–ï –ø—Ä–∞–≤–∏–º, —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º)
$envRaw = Get-Content -Raw -Encoding UTF8 $EnvPath
if($envRaw -match "`r"){ Write-Warning ".env —Å–æ–¥–µ—Ä–∂–∏—Ç CR (Windows-—Å—Ç—Ä–æ–∫–∏). –í –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ —É —Ç–µ–±—è —Å—Ç–æ–∏—Ç sed, –æ–Ω –∏—Ö —É–±–µ—Ä—ë—Ç –Ω–∞ –ª–µ—Ç—É." }
$envMap = Read-DotEnv $EnvPath
if(-not $envMap.ContainsKey("TELEGRAM_BOT_TOKEN") -or -not $envMap["TELEGRAM_BOT_TOKEN"]){
  Fail "–í .env –Ω–µ—Ç TELEGRAM_BOT_TOKEN (–∏–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π)."
}

# –í–∞–ª–∏–¥–∞—Ü–∏—è compose
docker compose -f "$ComposeYml" config *>$null
if($LASTEXITCODE -ne 0){ Fail "docker compose config –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π" }
Write-Host "‚úÖ docker compose config ‚Äî OK"

# ---------- –°–ë–û–†–ö–ê/–ó–ê–ü–£–°–ö ----------
Push-Location $RepoRoot
if($Rebuild){
  $args=@("build")
  if($NoCache){ $args += "--no-cache" }
  $args += @("web","bot")
  docker compose -f "$ComposeYml" @args
  if($LASTEXITCODE -ne 0){ Pop-Location; Fail "–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π" }
}
docker compose -f "$ComposeYml" up -d
if($LASTEXITCODE -ne 0){ Pop-Location; Fail "docker compose up -d –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π" }

# ---------- –û–ñ–ò–î–ê–ù–ò–ï –ó–î–û–†–û–í–¨–Ø ----------
$ok = Wait-Healthy @("db","cache","web","bot") $TimeoutSec
docker compose -f "$ComposeYml" ps

# ---------- –ë–´–°–¢–†–´–ï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ----------
Write-Host "`n--- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ web (–ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ) ---"
docker compose -f "$ComposeYml" exec -T web python -c "import os,socket; s=socket.socket(); s.settimeout(2); s.connect(('127.0.0.1', int(os.getenv('WEB_PORT','8000')))); print('WEB_OK'); s.close()" 2>$null

Write-Host "`n--- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ bot –ø—Ä–æ—Ü–µ—Å—Å–∞ (–∏—â–µ–º runner.py) ---"
# –ë–µ–∑ pgrep/procps: —á–∏—Ç–∞–µ–º –∫–æ–º–∞–Ω–¥–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ /proc
$botCmd = "for p in /proc/[0-9]*/cmdline; do tr '\0' ' ' < ""\$p"" 2>/dev/null; echo; done | grep -F 'bot/runner.py' || true"
docker compose -f "$ComposeYml" exec -T bot sh -lc "$botCmd"

Write-Host "`n--- –ü—Ä–æ–≤–µ—Ä–∫–∞ /app/.env –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ bot –Ω–∞ CR ---"
$crCheck = "[ -f /app/.env ] || { echo 'NO_/app/.env'; exit 0; }; tr -d '\r' < /app/.env | cmp -s - /app/.env && echo OK_LF || echo CR_FOUND"
docker compose -f "$ComposeYml" exec -T bot sh -lc "$crCheck"

Write-Host "`n--- –õ–æ–≥–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ $Tail —Å—Ç—Ä–æ–∫) ---"
docker compose -f "$ComposeYml" logs --tail $Tail db cache web bot

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –ø–æ –∂–µ–ª–∞–Ω–∏—é
if($SaveLogs){
  $diag = Join-Path $RepoRoot (".diagnostics\" + (Get-Date -Format "yyyyMMdd-HHmmss"))
  Save-Logs $diag $Tail
}

Pop-Location

if(-not $ok){ exit 2 } else { Write-Host "`nüéâ –í—Å—ë –ø–æ–¥–Ω—è–ª–æ—Å—å (–∏–ª–∏ –ø–æ—á—Ç–∏). –°–º–æ—Ç—Ä–∏ –≤—ã–≤–æ–¥ –≤—ã—à–µ." }
