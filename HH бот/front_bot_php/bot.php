<?php

require_once __DIR__ . '/vendor/autoload.php';

use FrontBot\Config\Config;
use FrontBot\Routers\StartRouter;
use FrontBot\Routers\MenuRouter;
use FrontBot\Routers\ResponsesRouter;
use FrontBot\Routers\AutoResponsesRouter;
use FrontBot\Routers\LettersRouter;
use FrontBot\Routers\StatsRouter;
use FrontBot\Utils\States;
use FrontBot\Utils\Texts;
use Longman\TelegramBot\Telegram;
use Longman\TelegramBot\Request;
use Longman\TelegramBot\Exception\TelegramException;
use Monolog\Logger;
use Monolog\Handler\StreamHandler;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
$logger = new Logger('telegram_bot');
$logger->pushHandler(new StreamHandler(__DIR__ . '/bot.log', Logger::INFO));

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
$userData = [];
$botData = [];

try {
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    $telegram = new Telegram(Config::TELEGRAM_BOT_TOKEN, Config::BOT_USERNAME);
    
    // –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    $telegram->enableLimiter();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    $commands = [
        ['command' => 'start', 'description' => '–ù–∞—á–∞—Ç—å / –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å'],
        ['command' => 'menu', 'description' => '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üß≠'],
        ['command' => 'responses', 'description' => '–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–∫–ª–∏–∫–∏ üöÄ'],
        ['command' => 'response_messages', 'description' => '–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞ ‚úâÔ∏è'],
        ['command' => 'auto_responses', 'description' => '–ê–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º ü§ñ'],
        ['command' => 'subscription', 'description' => '–ü–æ–¥–ø–∏—Å–∫–∞ üíé'],
        ['command' => 'stats', 'description' => '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä'],
        ['command' => 'support', 'description' => '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üÜò'],
        ['command' => 'referral', 'description' => '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ üéÅ'],
    ];
    
    Request::setMyCommands(['commands' => $commands]);
    
    $logger->info('Demo bot started successfully!');
    
    // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    while (true) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            $serverResponse = Request::getUpdates([
                'offset' => $botData['last_update_id'] ?? 0,
                'limit' => 100,
                'timeout' => 10
            ]);
            
            if ($serverResponse->isOk()) {
                $updates = $serverResponse->getResult();
                
                foreach ($updates as $update) {
                    $updateId = $update->getUpdateId();
                    $botData['last_update_id'] = $updateId + 1;
                    
                    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    $userId = null;
                    if ($update->getMessage()) {
                        $userId = $update->getMessage()->getFrom()->getId();
                    } elseif ($update->getCallbackQuery()) {
                        $userId = $update->getCallbackQuery()->getFrom()->getId();
                    }
                    
                    if (!$userId) {
                        continue;
                    }
                    
                    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if (!isset($userData[$userId])) {
                        $userData[$userId] = [];
                    }
                    
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    handleUpdate($update, $userData[$userId], $botData, $logger);
                }
            }
            
        } catch (TelegramException $e) {
            $logger->error('Telegram API error: ' . $e->getMessage());
            sleep(5); // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        } catch (Exception $e) {
            $logger->error('General error: ' . $e->getMessage());
            sleep(1);
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        usleep(100000); // 0.1 —Å–µ–∫—É–Ω–¥—ã
    }
    
} catch (TelegramException $e) {
    $logger->error('Failed to initialize bot: ' . $e->getMessage());
    echo 'Error: ' . $e->getMessage() . PHP_EOL;
} catch (Exception $e) {
    $logger->error('Unexpected error: ' . $e->getMessage());
    echo 'Unexpected error: ' . $e->getMessage() . PHP_EOL;
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
 */
function handleUpdate($update, array &$userData, array &$botData, Logger $logger): void
{
    try {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if ($update->getMessage() && $update->getMessage()->getText()) {
            $text = $update->getMessage()->getText();
            $command = explode(' ', $text)[0];
            
            switch ($command) {
                case '/start':
                    StartRouter::start($update, $userData);
                    break;
                    
                case '/menu':
                    MenuRouter::mainMenu($update, $userData);
                    break;
                    
                case '/responses':
                    ResponsesRouter::startResponsesEntry($update, $userData);
                    break;
                    
                case '/response_messages':
                    LettersRouter::showCoverLetters($update, $userData);
                    break;
                    
                case '/auto_responses':
                    AutoResponsesRouter::showAutoResponsesMenu($update, $userData);
                    break;
                    
                case '/subscription':
                    MenuRouter::showSubscription($update, $userData);
                    break;
                    
                case '/stats':
                    StatsRouter::showStatsMenu($update, $userData);
                    break;
                    
                case '/support':
                    MenuRouter::showSupport($update, $userData);
                    break;
                    
                case '/referral':
                    MenuRouter::showReferralProgram($update, $userData);
                    break;
                    
                default:
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    handleTextMessage($update, $userData, $botData);
                    break;
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries
        if ($update->getCallbackQuery()) {
            handleCallbackQuery($update, $userData, $botData);
        }
        
    } catch (Exception $e) {
        $logger->error('Error handling update: ' . $e->getMessage());
    }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback queries
 */
function handleCallbackQuery($update, array &$userData, array &$botData): void
{
    $callbackQuery = $update->getCallbackQuery();
    $data = $callbackQuery->getData();
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
    if ($data === 'link_account') {
        StartRouter::linkAccount($update, $userData);
        return;
    }
    
    if ($data === 'main_menu') {
        MenuRouter::backToMainMenu($update, $userData);
        return;
    }
    
    if ($data === 'subscription') {
        MenuRouter::showSubscription($update, $userData);
        return;
    }
    
    if ($data === 'pay_week' || $data === 'pay_month') {
        MenuRouter::handlePaymentStub($update, $userData);
        return;
    }
    
    if ($data === 'support') {
        MenuRouter::showSupport($update, $userData);
        return;
    }
    
    if ($data === 'referral') {
        MenuRouter::showReferralProgram($update, $userData);
        return;
    }
    
    // –ì–ª–∞–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
    if ($data === 'start_responses') {
        ResponsesRouter::startResponsesEntry($update, $userData);
        return;
    }
    
    if ($data === 'auto_responses') {
        AutoResponsesRouter::showAutoResponsesMenu($update, $userData);
        return;
    }
    
    if ($data === 'cover_letters') {
        LettersRouter::showCoverLetters($update, $userData);
        return;
    }
    
    if ($data === 'stats') {
        StatsRouter::showStatsMenu($update, $userData);
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤
    if ($data === 'new_request') {
        ResponsesRouter::askResume($update, $userData);
        return;
    }
    
    if ($data === 'past_requests') {
        sendInDevelopmentMessage($update);
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—é–º–µ
    if (preg_match('/^resume_/', $data)) {
        ResponsesRouter::askSearchMethod($update, $userData);
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–æ—Å–æ–±–∞ –ø–æ–∏—Å–∫–∞
    if ($data === 'configure_filters') {
        ResponsesRouter::askCountryForFilters($update, $userData);
        return;
    }
    
    if ($data === 'paste_link') {
        sendInDevelopmentMessage($update);
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω
    if (preg_match('/^country_/', $data)) {
        ResponsesRouter::askRegion($update, $userData);
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤
    if (preg_match('/^region_/', $data)) {
        ResponsesRouter::askSchedule($update, $userData);
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
    if (preg_match('/^schedule_(?!next)/', $data)) {
        ResponsesRouter::handleScheduleChoice($update, $userData);
        return;
    }
    
    if ($data === 'schedule_next') {
        ResponsesRouter::askEmployment($update, $userData);
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
    if (preg_match('/^employment_(?!next)/', $data)) {
        ResponsesRouter::handleEmploymentChoice($update, $userData);
        return;
    }
    
    if ($data === 'employment_next') {
        ResponsesRouter::askProfession($update, $userData);
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
    if (preg_match('/^profession_(?!next)/', $data)) {
        ResponsesRouter::handleProfessionChoice($update, $userData);
        return;
    }
    
    if ($data === 'profession_next') {
        ResponsesRouter::askKeyword($update, $userData);
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
    if (preg_match('/^page_profession_select_all/', $data)) {
        ResponsesRouter::handleProfessionSelectAll($update, $userData);
        return;
    }
    
    if (preg_match('/^page_profession_nav_/', $data)) {
        ResponsesRouter::handleProfessionNavigation($update, $userData);
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if ($data === 'continue_to_confirmation') {
        ResponsesRouter::confirmation($update, $userData);
        return;
    }
    
    if ($data === 'send_responses') {
        ResponsesRouter::sendResponses($update, $userData, $botData);
        return;
    }
    
    if ($data === 'restart_flow') {
        ResponsesRouter::askResume($update, $userData);
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º
    if ($data === 'cl_new') {
        LettersRouter::askNewCoverLetterTitle($update, $userData);
        return;
    }
    
    if (preg_match('/^cl_view_/', $data)) {
        LettersRouter::viewCoverLetter($update, $userData);
        return;
    }
    
    if ($data === 'cl_back_to_list') {
        LettersRouter::showCoverLetters($update, $userData);
        return;
    }
    
    if ($data === 'cl_delete') {
        LettersRouter::deleteCoverLetter($update, $userData);
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if (preg_match('/^stats_resume_/', $data)) {
        StatsRouter::showResumeStats($update, $userData);
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–æ–≤
    if ($data === 'auto_setup') {
        AutoResponsesRouter::startAutoSetup($update, $userData);
        return;
    }
    
    if ($data === 'auto_ask_resume') {
        AutoResponsesRouter::askAutoResume($update, $userData);
        return;
    }
    
    if (preg_match('/^auto_resume_/', $data)) {
        AutoResponsesRouter::askAutoSearchMethod($update, $userData);
        return;
    }
    
    if ($data === 'auto_configure_filters') {
        AutoResponsesRouter::configureAutoFilters($update, $userData);
        return;
    }
    
    if ($data === 'auto_paste_link') {
        AutoResponsesRouter::askAutoHhUrl($update, $userData);
        return;
    }
    
    if ($data === 'auto_continue_to_confirmation') {
        AutoResponsesRouter::autoConfirmation($update, $userData);
        return;
    }
    
    if ($data === 'auto_start') {
        AutoResponsesRouter::startAutoResponses($update, $userData);
        return;
    }
    
    if ($data === 'auto_stop') {
        AutoResponsesRouter::stopAutoResponses($update, $userData);
        return;
    }
    
    if ($data === 'auto_change_settings') {
        AutoResponsesRouter::askAutoResume($update, $userData);
        return;
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    sendInDevelopmentMessage($update);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function handleTextMessage($update, array &$userData, array &$botData): void
{
    $currentState = $userData['current_state'] ?? null;
    
    // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    switch ($currentState) {
        case States::ASK_KEYWORD:
            ResponsesRouter::handleKeywordInput($update, $userData);
            break;
            
        case States::CL_ASK_TITLE:
            LettersRouter::askNewCoverLetterBody($update, $userData);
            break;
            
        case States::CL_SAVE_BODY:
            LettersRouter::saveCoverLetterBody($update, $userData);
            break;
            
        case States::AUTO_ASK_HH_URL:
            AutoResponsesRouter::handleAutoHhUrlInput($update, $userData);
            break;
            
        default:
            // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            MenuRouter::mainMenu($update, $userData);
            break;
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
 */
function sendInDevelopmentMessage($update): void
{
    if ($update->getCallbackQuery()) {
        $chatId = $update->getCallbackQuery()->getMessage()->getChat()->getId();
        
        Request::answerCallbackQuery([
            'callback_query_id' => $update->getCallbackQuery()->getId()
        ]);
        
        Request::sendMessage([
            'chat_id' => $chatId,
            'text' => Texts::IN_DEVELOPMENT
        ]);
    } elseif ($update->getMessage()) {
        $chatId = $update->getMessage()->getChat()->getId();
        
        Request::sendMessage([
            'chat_id' => $chatId,
            'text' => Texts::IN_DEVELOPMENT
        ]);
    }
}